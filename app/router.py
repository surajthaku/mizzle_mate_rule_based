from app.classifier import classify_intent
from app.config import MODULE_REGISTRY
from app.exception import MizzleException
import logging,sys

from app.logger import logging

_loaded_modules = {}

def route_message(user_id: str, message: str) -> dict:

    """
    Route a user's message to the appropriate handler module based on classified intent.

    This function classifies the user's message to determine its intent, then routes the
    message to the corresponding module for processing. Modules are lazily loaded and cached
    for future use. If the intent is unknown or if an error occurs during processing,
    an appropriate error response is returned.

    Parameters:
        user_id (str): Unique identifier for the user sending the message.
        message (str): The user's input message to be processed.

    Returns:
        dict: A dictionary containing:
            - reply (str): The response generated by the appropriate module or an error message.
            - module (str): The name of the module that handled the request (or error type).
            - status (str): 'success' or 'error' based on the outcome.
            - http_status (int): HTTP-style status code representing the result.
    
    
    """
    try:
        intent = classify_intent(message)

        if intent not in MODULE_REGISTRY:
            return {
                "reply": "Sorry, I don't understand that request.",
                "module": "unknown",
                "status": "error",
                "http_status": 400
            }

        # Lazy load module
        if intent not in _loaded_modules:
            _loaded_modules[intent] = MODULE_REGISTRY[intent]()

        module_handler = _loaded_modules[intent]

        result = module_handler.handle(message)

        return {
            "reply": result,
            "module": intent,
            "status": "success",
            "http_status": 200
        }

    except Exception as e:
        logging.error(f"Error routing message for user {user_id}: {e}", exc_info=True)
        
        
        return {
            "reply": "An internal error occurred while processing your request.",
            "module": "internal_error",
            "status": "error",
            "http_status": 500
        }
        
